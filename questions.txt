Tree:
1. In-order traversal without recursion
2. Post order traversal without recursion
3. Pre-order traversal without recursion
4. Above with recursion
5. Match two trees
6. Find if given binary tree is foldable.
7. Level order traversal.
8. Given a BST, find nodes in a given range.
9. Find Lowest Common Ancestor in a BST.
10. Create a linked list of each level of a Binary Tree.
11. Check if a binary tree is a BST.
12. Print common nodes in two BSTs.
13. Print path from root to every leaf.
14. Find mirror image of a binary tree.
15. Find if any path has a given sum in a tree.
16. Check if tree is balanced.
17. Find kth smallest element in a BST.
18. Find size of tree.
19. Implement operations of BST.
20. Find smallest and largest path in tree.
21. Print Right/Left/Top view of a binary tree.
22. If a tree contains another tree.
23. Construct tree from pre-order/post-order + in-order traversals.
24. Print common nodes in two trees.

Queues
1. Implement queue using two stacks.

Stack
1. Sort a stack.

Linked List
1. Recursively reverse a linked list.
2. Iteratively reverse a linked list.
3. Reverse every k nodes of a linked list
4. Find kth to last element of linked list.
5. Merge two sorted linked list.
6. Pairwise swap elements of a linked list.
7. Detect loops in a linked list.
8. Remove duplicates from an unsorted linked list.
9. Find intersection of two linked list.



Strings
1. Find all permutations of a string
2. Reverse string.
3. Find if two strings are anagrams of each other.
4. Delete duplicates in a string.
5. Reverse words of a string.
6. Reverse string with words intact.

Arrays
1. Find pair with given difference.
2. Implement ArrayList or Vector data structure.
3. Find all pairs in a random array which sum up to given value.
4. Find minimum element in sorted rotated array in O(log n).
5. Given a rotated sorted array, find a specific element in less than O(n). eg. [10,11,12,15,1,4,7], find 1.
6. Find median of two sorted arrays.
7. Construct an array such that every element is greater that its predecessor and its successor.

Heaps
1. Check if given array is a binary heap.

Graphs
1. Find path between two nodes.
2. DFS.
3. BFS.
4. Detect cycle in a directed graph.

DP / Recursion / Algorithms
1. Word Break problem.
2. Print all subsets of a set. (Power Set)
3. Quick Sort.
4. Insertion Sort.
5. Largest continuous subarray.

Miscellaneous
1. Sort a HashMap by value.
2. Implement iterator class.
3. Find HCF.
4. Find LCM.
5. Find factorial.
6. nth fibonacci number.
